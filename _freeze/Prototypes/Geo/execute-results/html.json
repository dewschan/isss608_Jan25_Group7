{
  "hash": "bf0222fb16b855e08c01e5806ffa0e4a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Geospatial Prototypes\"\nformat: html\nauthor: \"Sei Sar Hla Kyi\"\ndate: \"March 21, 2025\"\ndate-modified: \"2025-04-03\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\n  warning: false\n---\n\n\n\n# R Packages Used\n\n::: panel-tabset\n## Packages Used\n\n| Package | Explanation |\n|----|----|\n| tidyverse | to efficiently manipulate and clean data, utilizing functions from packages like `dplyr` and `tidyr` for data wrangling |\n| SmartEDA | to help summarize dataset by providing insights such as missing values |\n| sf | for easy manipulation of spatial objects and performing geospatial analysis |\n| plotly | for dynamically exploring climate trends over time |\n| terra | for handling raster data and performing geospatial analysis in R |\n| gstat | for geostatistical modeling, including functions for spatial interpolation, variogram modeling, and kriging |\n| automap | to simplifies the process of spatial interpolation by automating model selection, variogram fitting, and kriging |\n\n## Code to Launch\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse,SmartEDA,sf,sfdep,plotly,tmap,terra,gstat,automap)\n```\n:::\n\n\n:::\n\n------------------------------------------------------------------------\n\n# Aspatial Data Wrangling\n\n## Importing the Data\n\nWe import the scraped data by using *read_csv* from readr package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather<- read_csv(\"data/combined_weather_data.csv\")\n```\n:::\n\n\n\nWe will see the format of the imported data and check if there are any missing values using ExpData from SmartEDA package.\n\n::: panel-tabset\n## type 1: Overall data summary\n\nComplete cases shows us if there are missing values. 100% means there is no missing values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather %>%\n  ExpData(type=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                                          Descriptions      Value\n1                                   Sample size (nrow)     446491\n2                              No. of variables (ncol)         16\n3                    No. of numeric/interger variables          3\n4                              No. of factor variables          0\n5                                No. of text variables         13\n6                             No. of logical variables          0\n7                          No. of identifier variables          0\n8                                No. of date variables          0\n9             No. of zero variance variables (uniform)          0\n10               %. of variables having complete cases    25% (4)\n11   %. of variables having >0% and <50% missing cases 56.25% (9)\n12 %. of variables having >=50% and <90% missing cases 18.75% (3)\n13          %. of variables having >=90% missing cases     0% (0)\n```\n\n\n:::\n:::\n\n\n\n## type 2: Variable level summary\n\nThis further break down by variables.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather %>%\n  ExpData(type=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Index                 Variable_Name Variable_Type Sample_n Missing_Count\n1      1                       Station     character   446491             0\n2      2                          Year       numeric   445641           850\n3      3                         Month       numeric   445641           850\n4      4                           Day       numeric   445641           850\n5      5     Daily Rainfall Total (mm)     character   446491             0\n6      6  Highest 30 min Rainfall (mm)     character   173989        272502\n7      7  Highest 60 min Rainfall (mm)     character   173989        272502\n8      8 Highest 120 min Rainfall (mm)     character   173989        272502\n9      9         Mean Temperature (°C)     character   446491             0\n10    10      Maximum Temperature (°C)     character   446256           235\n11    11      Minimum Temperature (°C)     character   446244           247\n12    12        Mean Wind Speed (km/h)     character   446491             0\n13    13         Max Wind Speed (km/h)     character   446217           274\n14    14  Highest 30 Min Rainfall (mm)     character   272502        173989\n15    15  Highest 60 Min Rainfall (mm)     character   272502        173989\n16    16 Highest 120 Min Rainfall (mm)     character   272502        173989\n   Per_of_Missing No_of_distinct_values\n1           0.000                    63\n2           0.002                    21\n3           0.002                    12\n4           0.002                    31\n5           0.000                  1478\n6           0.610                   477\n7           0.610                   609\n8           0.610                   719\n9           0.000                   106\n10          0.001                   159\n11          0.001                   116\n12          0.000                   326\n13          0.001                   576\n14          0.390                   414\n15          0.390                   545\n16          0.390                   637\n```\n\n\n:::\n:::\n\n\n:::\n\n## Renaming Variables\n\nVariable names will be renamed for consistency and ease of analysis. For instance, **\"Daily Rainfall Total (mm)\"** will be renamed to **\"DailyRainfall\"**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(weather) <- c(\"Station\", \"Year\", \"Month\", \"Day\", \n                            \"DailyRainfall\", \"Highest30minRainfall.x\",\"Highest60minRainfall.x\",\"Highest120minRainfall.x\",\n                          \"MeanTemperature\", \n                            \"MaxTemperature\", \"MinTemperature\", \n                            \"MeanWindSpeed\", \"MaxWindSpeed\", \n                            \"Highest30minRainfall.y\",\"Highest60minRainfall.y\",\"Highest120minRainfall.y\")\n```\n:::\n\n\n\n## Date Field\n\nNow we must ensure that Year, Month and Day fields are represented as numeric and combined as Date column by using *as.Date*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather <- weather %>%\n  mutate(\n    Year = as.numeric(Year),\n    Month = as.numeric(Month),\n    Day = as.numeric(Day),\n    Date = as.Date(paste(Year, Month, Day, sep = \"-\"), format = \"%Y-%m-%d\")\n  )\n```\n:::\n\n\n\n## Merging Columns\n\nThe columns **`Highest30minRainfall.x`** and **`Highest30minRainfall.y`** need to be merged into a single column. Whenever one of these columns has an `NA` value, the other column will have a valid value, meaning that together they form the complete dataset.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Merge the columns and replace any remaining NA or \"-\" with 0\nweather <- weather %>%\n  mutate(\n    Highest30minRainfall = coalesce(`Highest30minRainfall.x`, `Highest30minRainfall.y`),\n    Highest60minRainfall = coalesce(`Highest60minRainfall.x`, `Highest60minRainfall.y`),\n    Highest120minRainfall = coalesce(`Highest120minRainfall.x`, `Highest120minRainfall.y`)\n  ) %>%\n  # Convert \"-\" to NA, then replace NA with 0\n  mutate(\n    Highest30minRainfall = as.numeric(Highest30minRainfall), \n    Highest30minRainfall = ifelse(is.na(Highest30minRainfall), 0, Highest30minRainfall),\n    \n    Highest60minRainfall = as.numeric(Highest60minRainfall), \n    Highest60minRainfall = ifelse(is.na(Highest60minRainfall), 0, Highest60minRainfall),\n    \n    Highest120minRainfall = as.numeric(Highest120minRainfall), \n    Highest120minRainfall = ifelse(is.na(Highest120minRainfall), 0, Highest120minRainfall)\n  ) %>%\n  # Drop the original columns\n  select(-c(`Highest30minRainfall.x`, `Highest30minRainfall.y`, \n            `Highest60minRainfall.x`, `Highest60minRainfall.y`, \n            `Highest120minRainfall.x`, `Highest120minRainfall.y`))\n```\n:::\n\n\n\n## Converting data type\n\nUpon inspecting the dataset, we observed that certain columns, such as **Daily Rainfall Total (mm)** and **Mean Temperature (°C)**, were incorrectly classified as **character** variables instead of numeric. To ensure accurate analysis, these columns will be converted to **numeric** data types.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert columns 5 to 10 to numeric\nweather[, 5:10] <- lapply(weather[, 5:10], function(x) {\n  as.numeric(x)  # Convert to numeric\n})\n```\n:::\n\n\n\n## Calculate Columns\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather <- weather %>%\n  group_by(Station) %>%\n  mutate(\n    MonthlyRainfall = sum(DailyRainfall, na.rm = TRUE)\n  ) %>%\n  ungroup()\n```\n:::\n\n\n\n## Remove rows with no date\n\nRows with no date will not be helpful for our analysis in later sections. Therefore, we will be removing these rows.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather<- weather[!is.na(weather$Date), ]\n```\n:::\n\n\n\n## Converting aspatial data into geospatial data\n\nFirst, we will import station.csv which contains the longitude and latitude of each of the stations from our scraped data. We extracted this from the same website.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstations<- read_csv(\"data/stations.csv\")\n```\n:::\n\n\n\nLeft join each station's longitude/latitude data to weather dataframe by using the common column \"Station.\"\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather <- stations %>%   left_join(weather, by = c(\"Station\"))\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\nConvert to sf using *sf* package. s*vy21* is the official projected coordinates of Singapore. *3414* is the EPSG code of svy21.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather_sf <- st_as_sf(weather, \n                      coords = c(\"Longitude\",\n                                 \"Latitude\"),\n                      crs= 4326) %>%\n  st_transform(crs = 3414)\n```\n:::\n\n\n\n## Extract Data for Geospatial Analysis\n\n### Set Timeframe\n\nFirst we filter the dataset from Janurary 2021 to April 2024 since there are the most data recorded during these months, using the code chunk below.\n\n::: callout-note\n## Shiny App Note\n\nThis will be only used later for development of Shiny App prototype!\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather_filtered <- weather_sf %>%\n  filter((Year > 2021 | (Year == 2021 & Month >= 1)) & \n         (Year < 2024 | (Year == 2024 & Month <= 4)))\n```\n:::\n\n\n\nWe then save it as a rds file using *write_rds* and *read_rds* to load it.\n\n::: panel-tabset\n## Save\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(weather_filtered, \"data/rds/weather_filtered.rds\")\n```\n:::\n\n\n\n## Load\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather_filtered <- read_rds(\"data/rds/weather_filtered.rds\")\n```\n:::\n\n\n:::\n\n### Which Month has most extreme weather?\n\n::: callout-note\n## Shiny App Note\n\nFor the purpose of this take-home exercise, we will focus on one month. Users will be able to choose different Months and Years in Shiny app.\n:::\n\nTo see which month is the most interesting to focus on we determine the month with the most extremeweather conditions based on three key factors from our dataframe. We created a new variable to measure the extremeness ('ExtremeIndex') by finding the following:\n\n1.  **Total Monthly Rainfall** → Measures overall precipitation, indicating wet/extreme months.\n\n2.  **Mean of Temperature Variance** → Measures temperature fluctuations (Max - Min), capturing extreme hot/cold changes.\n\n3.  **Max of Highest Wind Speed** → Captures the strongest winds, which indicate stormy or extreme conditions.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather_extreme <- weather %>%\n  group_by(Year, Month) %>%\n  summarise(\n    MonthlyRainfall = sum(DailyRainfall, na.rm = TRUE),\n    TempVariance = mean(MaxTemperature-MinTemperature, na.rm = TRUE),\n    MaxWindSpeed = max(MaxWindSpeed, na.rm = TRUE)\n  ) %>%\n  ungroup() %>%\n  mutate(ExtremeIndex = scale(MonthlyRainfall) + scale(TempVariance) + scale(MaxWindSpeed))\n\nmost_extreme_month <- weather_extreme %>% filter(ExtremeIndex == max(ExtremeIndex))\n\n\np <- ggplot(weather_extreme, aes(x = as.Date(paste(Year, Month, \"01\", sep = \"-\")), y = ExtremeIndex)) +\n  geom_line(color = \"black\", size = 0.5) +\n  geom_point(aes(text = paste(\"Month:\", Month, Year, \"<br>Extreme Index:\", round(ExtremeIndex, 2)))) +\n  labs(title = \"Extreme Weather Index Over Time\",\n       x = \"Time (Month)\",\n       y = \"Extreme Weather Index\") +\n  theme_minimal()\n\nggplotly(p, tooltip = \"text\")\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-5345ba27572f02145925\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-5345ba27572f02145925\">{\"x\":{\"data\":[{\"x\":[12784,12815,12843,12874,12904,12935,12965,12996,13027,13057,13088,13118,13149,13180,13208,13239,13269,13300,13330,13361,13392,13422,13453,13483,13514,13545,13573,13604,13634,13665,13695,13726,13757,13787,13818,13848,13879,13910,13939,13970,14000,14031,14061,14092,14123,14153,14184,14214,14245,14276,14304,14335,14365,14396,14426,14457,14488,14518,14549,14579,14610,14641,14669,14700,14730,14761,14791,14822,14853,14883,14914,14944,14975,15006,15034,15065,15095,15126,15156,15187,15218,15248,15279,15309,15340,15371,15400,15431,15461,15492,15522,15553,15584,15614,15645,15675,15706,15737,15765,15796,15826,15857,15887,15918,15949,15979,16010,16040,16071,16102,16130,16161,16191,16222,16252,16283,16314,16344,16375,16405,16436,16467,16495,16526,16556,16587,16617,16648,16679,16709,16740,16770,16801,16832,16861,16892,16922,16953,16983,17014,17045,17075,17106,17136,17167,17198,17226,17257,17287,17318,17348,17379,17410,17440,17471,17501,17532,17563,17591,17622,17652,17683,17713,17744,17775,17805,17836,17866,17897,17928,17956,17987,18017,18048,18078,18109,18140,18170,18201,18231,18262,18293,18322,18353,18383,18414,18444,18475,18506,18536,18567,18597,18628,18659,18687,18718,18748,18779,18809,18840,18871,18901,18932,18962,18993,19024,19052,19083,19113,19144,19174,19205,19236,19266,19297,19327,19358,19389,19417,19448,19478,19509,19539,19570,19601,19631,19662,19692,19723,19754,19783,19814,19844,19875,19905,19936,19967,19997,20028,20058,20089],\"y\":[-1.8951734852048394,0.84167689165559834,0.012224008098501438,0.10535538167803882,0.28817211306559587,-1.8795309155112627,-0.90985291321713069,-2.2979343741845542,-0.48925721648594189,-0.16875617778068086,-1.781150881297032,-0.88185310603501632,-1.6287555148834958,-1.4719290235409785,0.58399979341342689,0.23429118121511316,-1.2874671437750247,-2.2280230029789556,-2.2814540453113108,-1.3407797778910129,-2.0211155293446064,-1.5519735255951794,-0.0040503910196685311,-0.64583703557847594,-2.1968404987490744,-0.72186409162024434,-0.38047496220721455,0.69225321347070634,-0.5361180754349163,-1.0196157228478362,-2.8269644605880293,-1.5224182742281727,-1.8164598697820928,-0.63085843900168981,-1.1907602737686784,-1.5185641487625936,-1.7684974062857526,-1.5171601178062821,-1.8168268690728182,-0.69047480024834673,-1.662811411191381,-1.6324126657062492,-3.0778017432931555,-1.7255601115273116,-0.64672613087772046,-1.4603696683213729,-0.79038363684532575,-2.2037461505045788,-1.9596833883328857,0.16961420316297154,1.3169380717862893,1.5413309497198082,0.26782710409282329,-2.1927398379217133,-1.3094036638328335,-1.4090678276390749,-1.4735968926398411,-1.182577089806973,1.5727989104162301,1.0231492615366127,-0.45111440945460196,-0.99465521947049762,0.32960222906226222,1.3950601533529898,0.40772795256331712,-0.67683007639993475,0.55527266991720281,-0.013132776621837983,0.62065126373543911,-1.2275346022306346,1.9732862171756635,-0.23581058359927171,-0.1152332263935758,0.54844202435037137,0.32234975035258012,1.1516540946895086,-1.2865118252092693,-0.057654152939215719,-2.0721353969785654,0.48809281185725095,-0.30683264900775842,1.5087139518276891,2.5290828090017663,-0.096974776693622977,1.2771504607455868,-0.30571754140210516,1.8315259231620162,1.9990530568520009,1.3179698072138151,-1.3819032176942299,-0.70360389973534621,0.2776347932257921,-0.091082404593532562,1.6578180815137469,2.1141546880005402,1.0481269761359817,1.5009154117381895,0.39042401742672944,0.029712485649257547,1.18179397988041,0.022876597401807697,0.094408682115766029,-2.1651696896853361,-0.72788444138635433,-0.3762891358925165,1.068033554675504,1.577094644628914,-0.5200307500728556,-2.3837918251106962,-0.62642110177652011,0.47995058954609265,2.41096672507389,-0.12220155390943607,0.15145428174740005,-0.19246466285965824,-0.52390787343978551,-0.49677360928551029,-0.51746928125458491,1.8416083855188408,1.1794619759026661,-1.4242308709351092,-1.2970925417994885,0.19775939363886241,1.5191402899725059,-1.3774936488375882,-1.5563584571392286,-2.0890747129986118,-1.7944181436173368,-1.3610100960461102,-1.4471118122531705,2.746136982620528,2.3761382409740914,-0.30389616769251881,-1.0717329366704254,-0.47672987819551071,-0.24143364078997426,3.1248153077471441,-0.16283089530106198,0.6484344271145992,-0.73256173327365004,0.977310408647179,1.3377462550761052,0.60297583642416219,0.14103766630696055,-0.23939425601376152,-1.0027506478742241,-0.19669928141459603,1.8591066197598878,-1.0302856831363858,-1.2258105874640044,-2.2191677614609184,-0.44899866138179512,1.9030321585368926,-0.73057629158195225,1.1677943697899946,-0.0080630757180480406,0.72527455930859674,-0.73803448390727633,2.5031461475018286,-0.080655417313573396,0.22063940418352043,-0.4552807700784276,-2.4580842978466668,-1.9837540289694084,-0.60731967209121951,2.2899254798488498,1.3100161469910776,0.31810870285505044,-1.7104950099021698,1.1130278660446429,1.2800051230423526,1.3503035140975743,-0.29989292036763737,-1.9011153730718828,-2.1239939931945271,-3.1012550875706317,-2.5731769666669861,-0.52155804078897428,0.48556898184504627,0.061819777273359078,-1.1966849303900458,-1.2611119221098455,0.98412737342435264,2.0261526653608914,1.7068245682028886,1.019023791944802,-0.69593260574093296,-0.97296683010416896,2.2108744583230417,0.44552444434700711,1.3454281640740848,2.5034770695270057,1.4078243736223199,-1.324950455826543,3.372119522624704,3.9141698989307154,1.2223026872078269,0.72185523838297083,-0.039523581381668754,2.8161716292506362,1.2646470115771324,0.60923290043755329,2.2058929367852325,-0.6019487194683103,-0.05495278738912357,1.8153041250907731,3.3259030047506446,2.3182621946589919,1.4226297969717461,1.2611139608027857,-0.58029101229148738,-0.2156963836527962,0.5895001856036759,2.8375004084901723,3.0626028011672575,0.227203221335539,0.85579519124993098,2.8907779242971552,1.5230879974492704,0.90467166322867743,0.42366873774835256,1.8967830001268717,-0.5927374642490183,-1.8986472688245017,-1.1110521355092906,0.059636701745013343,2.3602748217564988,2.3643705088577653,1.8132975091504839,-0.34178574006204765,0.24522973584035468,0.89119961162799988,1.072454025796493,2.1506534422466062,-3.3881893294542826,-1.3882635911386083,0.93235520241435421,-0.15123300102783188,1.7985453249359387,-0.012915001715937957,0.12658795495914632],\"text\":\"\",\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":1.8897637795275593,\"color\":\"rgba(0,0,0,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[12784,12815,12843,12874,12904,12935,12965,12996,13027,13057,13088,13118,13149,13180,13208,13239,13269,13300,13330,13361,13392,13422,13453,13483,13514,13545,13573,13604,13634,13665,13695,13726,13757,13787,13818,13848,13879,13910,13939,13970,14000,14031,14061,14092,14123,14153,14184,14214,14245,14276,14304,14335,14365,14396,14426,14457,14488,14518,14549,14579,14610,14641,14669,14700,14730,14761,14791,14822,14853,14883,14914,14944,14975,15006,15034,15065,15095,15126,15156,15187,15218,15248,15279,15309,15340,15371,15400,15431,15461,15492,15522,15553,15584,15614,15645,15675,15706,15737,15765,15796,15826,15857,15887,15918,15949,15979,16010,16040,16071,16102,16130,16161,16191,16222,16252,16283,16314,16344,16375,16405,16436,16467,16495,16526,16556,16587,16617,16648,16679,16709,16740,16770,16801,16832,16861,16892,16922,16953,16983,17014,17045,17075,17106,17136,17167,17198,17226,17257,17287,17318,17348,17379,17410,17440,17471,17501,17532,17563,17591,17622,17652,17683,17713,17744,17775,17805,17836,17866,17897,17928,17956,17987,18017,18048,18078,18109,18140,18170,18201,18231,18262,18293,18322,18353,18383,18414,18444,18475,18506,18536,18567,18597,18628,18659,18687,18718,18748,18779,18809,18840,18871,18901,18932,18962,18993,19024,19052,19083,19113,19144,19174,19205,19236,19266,19297,19327,19358,19389,19417,19448,19478,19509,19539,19570,19601,19631,19662,19692,19723,19754,19783,19814,19844,19875,19905,19936,19967,19997,20028,20058,20089],\"y\":[-1.8951734852048394,0.84167689165559834,0.012224008098501438,0.10535538167803882,0.28817211306559587,-1.8795309155112627,-0.90985291321713069,-2.2979343741845542,-0.48925721648594189,-0.16875617778068086,-1.781150881297032,-0.88185310603501632,-1.6287555148834958,-1.4719290235409785,0.58399979341342689,0.23429118121511316,-1.2874671437750247,-2.2280230029789556,-2.2814540453113108,-1.3407797778910129,-2.0211155293446064,-1.5519735255951794,-0.0040503910196685311,-0.64583703557847594,-2.1968404987490744,-0.72186409162024434,-0.38047496220721455,0.69225321347070634,-0.5361180754349163,-1.0196157228478362,-2.8269644605880293,-1.5224182742281727,-1.8164598697820928,-0.63085843900168981,-1.1907602737686784,-1.5185641487625936,-1.7684974062857526,-1.5171601178062821,-1.8168268690728182,-0.69047480024834673,-1.662811411191381,-1.6324126657062492,-3.0778017432931555,-1.7255601115273116,-0.64672613087772046,-1.4603696683213729,-0.79038363684532575,-2.2037461505045788,-1.9596833883328857,0.16961420316297154,1.3169380717862893,1.5413309497198082,0.26782710409282329,-2.1927398379217133,-1.3094036638328335,-1.4090678276390749,-1.4735968926398411,-1.182577089806973,1.5727989104162301,1.0231492615366127,-0.45111440945460196,-0.99465521947049762,0.32960222906226222,1.3950601533529898,0.40772795256331712,-0.67683007639993475,0.55527266991720281,-0.013132776621837983,0.62065126373543911,-1.2275346022306346,1.9732862171756635,-0.23581058359927171,-0.1152332263935758,0.54844202435037137,0.32234975035258012,1.1516540946895086,-1.2865118252092693,-0.057654152939215719,-2.0721353969785654,0.48809281185725095,-0.30683264900775842,1.5087139518276891,2.5290828090017663,-0.096974776693622977,1.2771504607455868,-0.30571754140210516,1.8315259231620162,1.9990530568520009,1.3179698072138151,-1.3819032176942299,-0.70360389973534621,0.2776347932257921,-0.091082404593532562,1.6578180815137469,2.1141546880005402,1.0481269761359817,1.5009154117381895,0.39042401742672944,0.029712485649257547,1.18179397988041,0.022876597401807697,0.094408682115766029,-2.1651696896853361,-0.72788444138635433,-0.3762891358925165,1.068033554675504,1.577094644628914,-0.5200307500728556,-2.3837918251106962,-0.62642110177652011,0.47995058954609265,2.41096672507389,-0.12220155390943607,0.15145428174740005,-0.19246466285965824,-0.52390787343978551,-0.49677360928551029,-0.51746928125458491,1.8416083855188408,1.1794619759026661,-1.4242308709351092,-1.2970925417994885,0.19775939363886241,1.5191402899725059,-1.3774936488375882,-1.5563584571392286,-2.0890747129986118,-1.7944181436173368,-1.3610100960461102,-1.4471118122531705,2.746136982620528,2.3761382409740914,-0.30389616769251881,-1.0717329366704254,-0.47672987819551071,-0.24143364078997426,3.1248153077471441,-0.16283089530106198,0.6484344271145992,-0.73256173327365004,0.977310408647179,1.3377462550761052,0.60297583642416219,0.14103766630696055,-0.23939425601376152,-1.0027506478742241,-0.19669928141459603,1.8591066197598878,-1.0302856831363858,-1.2258105874640044,-2.2191677614609184,-0.44899866138179512,1.9030321585368926,-0.73057629158195225,1.1677943697899946,-0.0080630757180480406,0.72527455930859674,-0.73803448390727633,2.5031461475018286,-0.080655417313573396,0.22063940418352043,-0.4552807700784276,-2.4580842978466668,-1.9837540289694084,-0.60731967209121951,2.2899254798488498,1.3100161469910776,0.31810870285505044,-1.7104950099021698,1.1130278660446429,1.2800051230423526,1.3503035140975743,-0.29989292036763737,-1.9011153730718828,-2.1239939931945271,-3.1012550875706317,-2.5731769666669861,-0.52155804078897428,0.48556898184504627,0.061819777273359078,-1.1966849303900458,-1.2611119221098455,0.98412737342435264,2.0261526653608914,1.7068245682028886,1.019023791944802,-0.69593260574093296,-0.97296683010416896,2.2108744583230417,0.44552444434700711,1.3454281640740848,2.5034770695270057,1.4078243736223199,-1.324950455826543,3.372119522624704,3.9141698989307154,1.2223026872078269,0.72185523838297083,-0.039523581381668754,2.8161716292506362,1.2646470115771324,0.60923290043755329,2.2058929367852325,-0.6019487194683103,-0.05495278738912357,1.8153041250907731,3.3259030047506446,2.3182621946589919,1.4226297969717461,1.2611139608027857,-0.58029101229148738,-0.2156963836527962,0.5895001856036759,2.8375004084901723,3.0626028011672575,0.227203221335539,0.85579519124993098,2.8907779242971552,1.5230879974492704,0.90467166322867743,0.42366873774835256,1.8967830001268717,-0.5927374642490183,-1.8986472688245017,-1.1110521355092906,0.059636701745013343,2.3602748217564988,2.3643705088577653,1.8132975091504839,-0.34178574006204765,0.24522973584035468,0.89119961162799988,1.072454025796493,2.1506534422466062,-3.3881893294542826,-1.3882635911386083,0.93235520241435421,-0.15123300102783188,1.7985453249359387,-0.012915001715937957,0.12658795495914632],\"text\":[\"Month: 1 2005 <br>Extreme Index: -1.9\",\"Month: 2 2005 <br>Extreme Index: 0.84\",\"Month: 3 2005 <br>Extreme Index: 0.01\",\"Month: 4 2005 <br>Extreme Index: 0.11\",\"Month: 5 2005 <br>Extreme Index: 0.29\",\"Month: 6 2005 <br>Extreme Index: -1.88\",\"Month: 7 2005 <br>Extreme Index: -0.91\",\"Month: 8 2005 <br>Extreme Index: -2.3\",\"Month: 9 2005 <br>Extreme Index: -0.49\",\"Month: 10 2005 <br>Extreme Index: -0.17\",\"Month: 11 2005 <br>Extreme Index: -1.78\",\"Month: 12 2005 <br>Extreme Index: -0.88\",\"Month: 1 2006 <br>Extreme Index: -1.63\",\"Month: 2 2006 <br>Extreme Index: -1.47\",\"Month: 3 2006 <br>Extreme Index: 0.58\",\"Month: 4 2006 <br>Extreme Index: 0.23\",\"Month: 5 2006 <br>Extreme Index: -1.29\",\"Month: 6 2006 <br>Extreme Index: -2.23\",\"Month: 7 2006 <br>Extreme Index: -2.28\",\"Month: 8 2006 <br>Extreme Index: -1.34\",\"Month: 9 2006 <br>Extreme Index: -2.02\",\"Month: 10 2006 <br>Extreme Index: -1.55\",\"Month: 11 2006 <br>Extreme Index: 0\",\"Month: 12 2006 <br>Extreme Index: -0.65\",\"Month: 1 2007 <br>Extreme Index: -2.2\",\"Month: 2 2007 <br>Extreme Index: -0.72\",\"Month: 3 2007 <br>Extreme Index: -0.38\",\"Month: 4 2007 <br>Extreme Index: 0.69\",\"Month: 5 2007 <br>Extreme Index: -0.54\",\"Month: 6 2007 <br>Extreme Index: -1.02\",\"Month: 7 2007 <br>Extreme Index: -2.83\",\"Month: 8 2007 <br>Extreme Index: -1.52\",\"Month: 9 2007 <br>Extreme Index: -1.82\",\"Month: 10 2007 <br>Extreme Index: -0.63\",\"Month: 11 2007 <br>Extreme Index: -1.19\",\"Month: 12 2007 <br>Extreme Index: -1.52\",\"Month: 1 2008 <br>Extreme Index: -1.77\",\"Month: 2 2008 <br>Extreme Index: -1.52\",\"Month: 3 2008 <br>Extreme Index: -1.82\",\"Month: 4 2008 <br>Extreme Index: -0.69\",\"Month: 5 2008 <br>Extreme Index: -1.66\",\"Month: 6 2008 <br>Extreme Index: -1.63\",\"Month: 7 2008 <br>Extreme Index: -3.08\",\"Month: 8 2008 <br>Extreme Index: -1.73\",\"Month: 9 2008 <br>Extreme Index: -0.65\",\"Month: 10 2008 <br>Extreme Index: -1.46\",\"Month: 11 2008 <br>Extreme Index: -0.79\",\"Month: 12 2008 <br>Extreme Index: -2.2\",\"Month: 1 2009 <br>Extreme Index: -1.96\",\"Month: 2 2009 <br>Extreme Index: 0.17\",\"Month: 3 2009 <br>Extreme Index: 1.32\",\"Month: 4 2009 <br>Extreme Index: 1.54\",\"Month: 5 2009 <br>Extreme Index: 0.27\",\"Month: 6 2009 <br>Extreme Index: -2.19\",\"Month: 7 2009 <br>Extreme Index: -1.31\",\"Month: 8 2009 <br>Extreme Index: -1.41\",\"Month: 9 2009 <br>Extreme Index: -1.47\",\"Month: 10 2009 <br>Extreme Index: -1.18\",\"Month: 11 2009 <br>Extreme Index: 1.57\",\"Month: 12 2009 <br>Extreme Index: 1.02\",\"Month: 1 2010 <br>Extreme Index: -0.45\",\"Month: 2 2010 <br>Extreme Index: -0.99\",\"Month: 3 2010 <br>Extreme Index: 0.33\",\"Month: 4 2010 <br>Extreme Index: 1.4\",\"Month: 5 2010 <br>Extreme Index: 0.41\",\"Month: 6 2010 <br>Extreme Index: -0.68\",\"Month: 7 2010 <br>Extreme Index: 0.56\",\"Month: 8 2010 <br>Extreme Index: -0.01\",\"Month: 9 2010 <br>Extreme Index: 0.62\",\"Month: 10 2010 <br>Extreme Index: -1.23\",\"Month: 11 2010 <br>Extreme Index: 1.97\",\"Month: 12 2010 <br>Extreme Index: -0.24\",\"Month: 1 2011 <br>Extreme Index: -0.12\",\"Month: 2 2011 <br>Extreme Index: 0.55\",\"Month: 3 2011 <br>Extreme Index: 0.32\",\"Month: 4 2011 <br>Extreme Index: 1.15\",\"Month: 5 2011 <br>Extreme Index: -1.29\",\"Month: 6 2011 <br>Extreme Index: -0.06\",\"Month: 7 2011 <br>Extreme Index: -2.07\",\"Month: 8 2011 <br>Extreme Index: 0.49\",\"Month: 9 2011 <br>Extreme Index: -0.31\",\"Month: 10 2011 <br>Extreme Index: 1.51\",\"Month: 11 2011 <br>Extreme Index: 2.53\",\"Month: 12 2011 <br>Extreme Index: -0.1\",\"Month: 1 2012 <br>Extreme Index: 1.28\",\"Month: 2 2012 <br>Extreme Index: -0.31\",\"Month: 3 2012 <br>Extreme Index: 1.83\",\"Month: 4 2012 <br>Extreme Index: 2\",\"Month: 5 2012 <br>Extreme Index: 1.32\",\"Month: 6 2012 <br>Extreme Index: -1.38\",\"Month: 7 2012 <br>Extreme Index: -0.7\",\"Month: 8 2012 <br>Extreme Index: 0.28\",\"Month: 9 2012 <br>Extreme Index: -0.09\",\"Month: 10 2012 <br>Extreme Index: 1.66\",\"Month: 11 2012 <br>Extreme Index: 2.11\",\"Month: 12 2012 <br>Extreme Index: 1.05\",\"Month: 1 2013 <br>Extreme Index: 1.5\",\"Month: 2 2013 <br>Extreme Index: 0.39\",\"Month: 3 2013 <br>Extreme Index: 0.03\",\"Month: 4 2013 <br>Extreme Index: 1.18\",\"Month: 5 2013 <br>Extreme Index: 0.02\",\"Month: 6 2013 <br>Extreme Index: 0.09\",\"Month: 7 2013 <br>Extreme Index: -2.17\",\"Month: 8 2013 <br>Extreme Index: -0.73\",\"Month: 9 2013 <br>Extreme Index: -0.38\",\"Month: 10 2013 <br>Extreme Index: 1.07\",\"Month: 11 2013 <br>Extreme Index: 1.58\",\"Month: 12 2013 <br>Extreme Index: -0.52\",\"Month: 1 2014 <br>Extreme Index: -2.38\",\"Month: 2 2014 <br>Extreme Index: -0.63\",\"Month: 3 2014 <br>Extreme Index: 0.48\",\"Month: 4 2014 <br>Extreme Index: 2.41\",\"Month: 5 2014 <br>Extreme Index: -0.12\",\"Month: 6 2014 <br>Extreme Index: 0.15\",\"Month: 7 2014 <br>Extreme Index: -0.19\",\"Month: 8 2014 <br>Extreme Index: -0.52\",\"Month: 9 2014 <br>Extreme Index: -0.5\",\"Month: 10 2014 <br>Extreme Index: -0.52\",\"Month: 11 2014 <br>Extreme Index: 1.84\",\"Month: 12 2014 <br>Extreme Index: 1.18\",\"Month: 1 2015 <br>Extreme Index: -1.42\",\"Month: 2 2015 <br>Extreme Index: -1.3\",\"Month: 3 2015 <br>Extreme Index: 0.2\",\"Month: 4 2015 <br>Extreme Index: 1.52\",\"Month: 5 2015 <br>Extreme Index: -1.38\",\"Month: 6 2015 <br>Extreme Index: -1.56\",\"Month: 7 2015 <br>Extreme Index: -2.09\",\"Month: 8 2015 <br>Extreme Index: -1.79\",\"Month: 9 2015 <br>Extreme Index: -1.36\",\"Month: 10 2015 <br>Extreme Index: -1.45\",\"Month: 11 2015 <br>Extreme Index: 2.75\",\"Month: 12 2015 <br>Extreme Index: 2.38\",\"Month: 1 2016 <br>Extreme Index: -0.3\",\"Month: 2 2016 <br>Extreme Index: -1.07\",\"Month: 3 2016 <br>Extreme Index: -0.48\",\"Month: 4 2016 <br>Extreme Index: -0.24\",\"Month: 5 2016 <br>Extreme Index: 3.12\",\"Month: 6 2016 <br>Extreme Index: -0.16\",\"Month: 7 2016 <br>Extreme Index: 0.65\",\"Month: 8 2016 <br>Extreme Index: -0.73\",\"Month: 9 2016 <br>Extreme Index: 0.98\",\"Month: 10 2016 <br>Extreme Index: 1.34\",\"Month: 11 2016 <br>Extreme Index: 0.6\",\"Month: 12 2016 <br>Extreme Index: 0.14\",\"Month: 1 2017 <br>Extreme Index: -0.24\",\"Month: 2 2017 <br>Extreme Index: -1\",\"Month: 3 2017 <br>Extreme Index: -0.2\",\"Month: 4 2017 <br>Extreme Index: 1.86\",\"Month: 5 2017 <br>Extreme Index: -1.03\",\"Month: 6 2017 <br>Extreme Index: -1.23\",\"Month: 7 2017 <br>Extreme Index: -2.22\",\"Month: 8 2017 <br>Extreme Index: -0.45\",\"Month: 9 2017 <br>Extreme Index: 1.9\",\"Month: 10 2017 <br>Extreme Index: -0.73\",\"Month: 11 2017 <br>Extreme Index: 1.17\",\"Month: 12 2017 <br>Extreme Index: -0.01\",\"Month: 1 2018 <br>Extreme Index: 0.73\",\"Month: 2 2018 <br>Extreme Index: -0.74\",\"Month: 3 2018 <br>Extreme Index: 2.5\",\"Month: 4 2018 <br>Extreme Index: -0.08\",\"Month: 5 2018 <br>Extreme Index: 0.22\",\"Month: 6 2018 <br>Extreme Index: -0.46\",\"Month: 7 2018 <br>Extreme Index: -2.46\",\"Month: 8 2018 <br>Extreme Index: -1.98\",\"Month: 9 2018 <br>Extreme Index: -0.61\",\"Month: 10 2018 <br>Extreme Index: 2.29\",\"Month: 11 2018 <br>Extreme Index: 1.31\",\"Month: 12 2018 <br>Extreme Index: 0.32\",\"Month: 1 2019 <br>Extreme Index: -1.71\",\"Month: 2 2019 <br>Extreme Index: 1.11\",\"Month: 3 2019 <br>Extreme Index: 1.28\",\"Month: 4 2019 <br>Extreme Index: 1.35\",\"Month: 5 2019 <br>Extreme Index: -0.3\",\"Month: 6 2019 <br>Extreme Index: -1.9\",\"Month: 7 2019 <br>Extreme Index: -2.12\",\"Month: 8 2019 <br>Extreme Index: -3.1\",\"Month: 9 2019 <br>Extreme Index: -2.57\",\"Month: 10 2019 <br>Extreme Index: -0.52\",\"Month: 11 2019 <br>Extreme Index: 0.49\",\"Month: 12 2019 <br>Extreme Index: 0.06\",\"Month: 1 2020 <br>Extreme Index: -1.2\",\"Month: 2 2020 <br>Extreme Index: -1.26\",\"Month: 3 2020 <br>Extreme Index: 0.98\",\"Month: 4 2020 <br>Extreme Index: 2.03\",\"Month: 5 2020 <br>Extreme Index: 1.71\",\"Month: 6 2020 <br>Extreme Index: 1.02\",\"Month: 7 2020 <br>Extreme Index: -0.7\",\"Month: 8 2020 <br>Extreme Index: -0.97\",\"Month: 9 2020 <br>Extreme Index: 2.21\",\"Month: 10 2020 <br>Extreme Index: 0.45\",\"Month: 11 2020 <br>Extreme Index: 1.35\",\"Month: 12 2020 <br>Extreme Index: 2.5\",\"Month: 1 2021 <br>Extreme Index: 1.41\",\"Month: 2 2021 <br>Extreme Index: -1.32\",\"Month: 3 2021 <br>Extreme Index: 3.37\",\"Month: 4 2021 <br>Extreme Index: 3.91\",\"Month: 5 2021 <br>Extreme Index: 1.22\",\"Month: 6 2021 <br>Extreme Index: 0.72\",\"Month: 7 2021 <br>Extreme Index: -0.04\",\"Month: 8 2021 <br>Extreme Index: 2.82\",\"Month: 9 2021 <br>Extreme Index: 1.26\",\"Month: 10 2021 <br>Extreme Index: 0.61\",\"Month: 11 2021 <br>Extreme Index: 2.21\",\"Month: 12 2021 <br>Extreme Index: -0.6\",\"Month: 1 2022 <br>Extreme Index: -0.05\",\"Month: 2 2022 <br>Extreme Index: 1.82\",\"Month: 3 2022 <br>Extreme Index: 3.33\",\"Month: 4 2022 <br>Extreme Index: 2.32\",\"Month: 5 2022 <br>Extreme Index: 1.42\",\"Month: 6 2022 <br>Extreme Index: 1.26\",\"Month: 7 2022 <br>Extreme Index: -0.58\",\"Month: 8 2022 <br>Extreme Index: -0.22\",\"Month: 9 2022 <br>Extreme Index: 0.59\",\"Month: 10 2022 <br>Extreme Index: 2.84\",\"Month: 11 2022 <br>Extreme Index: 3.06\",\"Month: 12 2022 <br>Extreme Index: 0.23\",\"Month: 1 2023 <br>Extreme Index: 0.86\",\"Month: 2 2023 <br>Extreme Index: 2.89\",\"Month: 3 2023 <br>Extreme Index: 1.52\",\"Month: 4 2023 <br>Extreme Index: 0.9\",\"Month: 5 2023 <br>Extreme Index: 0.42\",\"Month: 6 2023 <br>Extreme Index: 1.9\",\"Month: 7 2023 <br>Extreme Index: -0.59\",\"Month: 8 2023 <br>Extreme Index: -1.9\",\"Month: 9 2023 <br>Extreme Index: -1.11\",\"Month: 10 2023 <br>Extreme Index: 0.06\",\"Month: 11 2023 <br>Extreme Index: 2.36\",\"Month: 12 2023 <br>Extreme Index: 2.36\",\"Month: 1 2024 <br>Extreme Index: 1.81\",\"Month: 2 2024 <br>Extreme Index: -0.34\",\"Month: 3 2024 <br>Extreme Index: 0.25\",\"Month: 4 2024 <br>Extreme Index: 0.89\",\"Month: 5 2024 <br>Extreme Index: 1.07\",\"Month: 6 2024 <br>Extreme Index: 2.15\",\"Month: 7 2024 <br>Extreme Index: -3.39\",\"Month: 8 2024 <br>Extreme Index: -1.39\",\"Month: 9 2024 <br>Extreme Index: 0.93\",\"Month: 10 2024 <br>Extreme Index: -0.15\",\"Month: 11 2024 <br>Extreme Index: 1.8\",\"Month: 12 2024 <br>Extreme Index: -0.01\",\"Month: 1 2025 <br>Extreme Index: 0.13\"],\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"rgba(0,0,0,1)\",\"opacity\":1,\"size\":5.6692913385826778,\"symbol\":\"circle\",\"line\":{\"width\":1.8897637795275593,\"color\":\"rgba(0,0,0,1)\"}},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":43.762557077625573,\"r\":7.3059360730593621,\"b\":40.182648401826498,\"l\":37.260273972602747},\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724},\"title\":{\"text\":\"Extreme Weather Index Over Time\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":17.534246575342465},\"x\":0,\"xref\":\"paper\"},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[12418.75,20454.25],\"tickmode\":\"array\",\"ticktext\":[\"2005\",\"2010\",\"2015\",\"2020\",\"2025\"],\"tickvals\":[12784,14610,16436,18262,20089],\"categoryorder\":\"array\",\"categoryarray\":[\"2005\",\"2010\",\"2015\",\"2020\",\"2025\"],\"nticks\":null,\"ticks\":\"\",\"tickcolor\":null,\"ticklen\":3.6529680365296811,\"tickwidth\":0,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(235,235,235,1)\",\"gridwidth\":0.66417600664176002,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"Time (Month)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[-3.7533072908735328,4.2792878603499656],\"tickmode\":\"array\",\"ticktext\":[\"-2\",\"0\",\"2\",\"4\"],\"tickvals\":[-2,0,2,4],\"categoryorder\":\"array\",\"categoryarray\":[\"-2\",\"0\",\"2\",\"4\"],\"nticks\":null,\"ticks\":\"\",\"tickcolor\":null,\"ticklen\":3.6529680365296811,\"tickwidth\":0,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(235,235,235,1)\",\"gridwidth\":0.66417600664176002,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"Extreme Weather Index\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"showlegend\":false,\"legend\":{\"bgcolor\":null,\"bordercolor\":null,\"borderwidth\":0,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.68949771689498}},\"hovermode\":\"closest\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"7c991b0b32b5\":{\"x\":{},\"y\":{},\"type\":\"scatter\"},\"7c997c2e16f1\":{\"x\":{},\"y\":{},\"text\":{}}},\"cur_data\":\"7c991b0b32b5\",\"visdat\":{\"7c991b0b32b5\":[\"function (y) \",\"x\"],\"7c997c2e16f1\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n### Month Data Extraction\n\nWe found that April 2021 had the most extreme weather. Therefore, we will extract this month for deeper insights with geospatial analysis ( for the purpose of this take-home exercise).\n\nWe keep the stations that has data for all three fields throughout our time-series data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather_month <- weather_filtered %>%\n  filter(Year == 2021, Month == 4) %>%\n  group_by(Station) %>%\n  summarise(\n    MonthlyRainfall = sum(DailyRainfall, na.rm = TRUE),\n    MonthlyMeanTemp = mean(MeanTemperature, na.rm = TRUE),\n    MonthlyMeanWindSpeed = mean(MeanWindSpeed, na.rm = TRUE)\n  ) %>%\n  ungroup()\n\nkeepstations <- c(\"Admiralty\", \"Ang Mo Kio\", \"Changi\",\"Choa Chu Kang (South)\",\"East Coast Parkway\",\"Jurong (West)\",\"Jurong Island\",\"Newton\",\"Pasir Panjang\",\"Pulau Ubin\",\"Seletar\",\"Sentosa Island\",\"Tai Seng\",\"Tuas South\")\n\nweather_month<- weather_month%>%\n  filter(Station %in% keepstations)\n```\n:::\n\n\n\nWe save it in the same way as a rds file.\n\n::: panel-tabset\n## Save\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(weather_month, \"data/rds/weather_month.rds\")\n```\n:::\n\n\n\n## Load\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather_month <- read_rds(\"data/rds/weather_month.rds\")\n```\n:::\n\n\n:::\n\n------------------------------------------------------------------------\n\n# Geospatial Data\n\nImport the geospatial data using `st_read` and then transform it to Singapore's coordinate reference system (CRS) 3414 using the `st_transform` function from the `sf` package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz2019 <- st_read(dsn = \"data/geospatial\", \n                    layer = \"MPSZ-2019\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MPSZ-2019' from data source \n  `/Users/seesarhlakyi/Desktop/ssrhk/VA Project/isss608_Jan25_Group7/Prototypes/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\nWe save this for later use.\n\n::: panel-tabset\n## Save\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(mpsz2019, \"data/rds/mpsz2019.rds\")\n```\n:::\n\n\n\n## Load\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz2019 <- read_rds(\"data/rds/mpsz2019.rds\")\n```\n:::\n\n\n:::\n\n------------------------------------------------------------------------\n\n# Spatial Interpolation\n\nSpatial interpolation is a critical technique in geospatial analysis, especially when dealing with unsampled locations. In the case of the SG ClimateViz project, there are many areas where weather stations are missing or sparse, making it impossible to directly obtain weather-related metrics such as monthly rainfall for certain regions. Spatial interpolation allows us to estimate these missing values by leveraging the known data points from nearby locations.\n\n## Data Preparation\n\nWe need create a grid data object by using `rast()` of terra package as shown in the cod chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid <- terra::rast(mpsz2019, \n                    nrows = 200, \n                    ncols = 500)\ngrid\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatRaster \ndimensions  : 200, 500, 1  (nrow, ncol, nlyr)\nresolution  : 107.4578, 172.5381  (x, y)\nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncoord. ref. : SVY21 / Singapore TM (EPSG:3414) \n```\n\n\n:::\n:::\n\n\n\nNext, a list called xy will be created by using `xyFromCell()` of terra package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxy <- terra::xyFromCell(grid, \n                        1:ncell(grid))\nhead(xy)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            x        y\n[1,] 2721.267 50170.07\n[2,] 2828.725 50170.07\n[3,] 2936.183 50170.07\n[4,] 3043.640 50170.07\n[5,] 3151.098 50170.07\n[6,] 3258.556 50170.07\n```\n\n\n:::\n:::\n\n\n\nWe will create a data frame called *coop* with prediction/simulation locations by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoop <- st_as_sf(as.data.frame(xy), \n                 coords = c(\"x\", \"y\"),\n                 crs = st_crs(mpsz2019))\ncoop <- st_filter(coop, mpsz2019)\nhead(coop)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 0 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 25072.49 ymin: 50170.07 xmax: 25717.24 ymax: 50170.07\nProjected CRS: SVY21 / Singapore TM\n                   geometry\n1 POINT (25072.49 50170.07)\n2 POINT (25179.95 50170.07)\n3 POINT (25287.41 50170.07)\n4 POINT (25502.32 50170.07)\n5 POINT (25609.78 50170.07)\n6 POINT (25717.24 50170.07)\n```\n\n\n:::\n:::\n\n\n\n## Manual Variogram\n\nKriging is one of several methods that use a limited set of sampled data points to estimate the value of a variable over a continuous spatial field. Since monthly rainfall over Singapore varies across a random spatial field, we will use kriging.\n\nLet's explore both manually inputting variogram paramaters and autofitting it. The following steps and code chunk was used to perform kriging.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# The empirical variogram\nv_temp <- variogram(MonthlyMeanTemp ~ 1, data = weather_month)\n\n# Manually fit the variogram model\nfv_temp <- fit.variogram(v_temp, model = vgm(psill = 0.5, model = \"Sph\", range = 5000, nugget = 0.1))\n\n# Perform Kriging\nk_temp <- gstat(formula = MonthlyMeanTemp ~ 1, data = weather_month, model = fv_temp)\n\n# Create prediction grid and perform kriging\nresp_temp <- predict(k_temp, coop)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n```{.r .cell-code}\n# Extract coordinates and predictions\nresp_temp$x <- st_coordinates(resp_temp)[,1]\nresp_temp$y <- st_coordinates(resp_temp)[,2]\nresp_temp$pred <- resp_temp$var1.pred\n\n# Kriging Variance\nresp_temp$variance <- resp_temp$var1.var\n\n# Create raster layer for predicted values\nkpred_temp <- terra::rasterize(resp_temp, grid, field = \"pred\")\n\n# Create raster layer for Kriging Variance\nkpred_temp_variance <- terra::rasterize(resp_temp, grid, field = \"variance\")\n```\n:::\n\n\n\n::: panel-tabset\n## Mean Temp\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(kpred_temp) + \n  tm_raster(col_alpha = 0.6, \n            col.scale = tm_scale(values = \"brewer.yl_or_rd\"), \n            col.legend = tm_legend(title = \"Mean Temperature (°C)\")) +\n  tm_title(\"Distribution of Mean Temperature, Apr 2021\") +\n  tm_layout(frame = TRUE) +\n  tm_compass(type = \"8star\", size = 2) +\n  tm_grid(alpha = 0.2)\n```\n\n::: {.cell-output-display}\n![](Geo_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n\n## Kriging Variance\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(kpred_temp_variance) + \n  tm_raster(col_alpha = 0.6, \n            col.scale = tm_scale(values = \"brewer.yl_gn_bu\"), \n            col.legend = tm_legend(title = \"Temperature Variance\")) +\n  tm_title(\"Kriging Variance of Temperature, Apr 2021\") +\n  tm_layout(frame = TRUE) +\n  tm_compass(type = \"8star\", size = 2) +\n  tm_grid(alpha = 0.2)\n```\n\n::: {.cell-output-display}\n![](Geo_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n:::\n\n## AutoVariogram\n\nNext, we explore autofitting by using *autofitVariogram*. The rest of the steps are the same as the previous section.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Kriging for Monthly Mean Temperature\nv_temp <- autofitVariogram(MonthlyMeanTemp ~ 1, weather_month)\nk_temp <- gstat(formula = MonthlyMeanTemp ~ 1, \n                model = v_temp$var_model,\n                data = weather_month)\n\n# Create prediction grid\nresp_temp <- predict(k_temp, coop)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n```{.r .cell-code}\n# Extract coordinates \nresp_temp$x <- st_coordinates(resp_temp)[,1]\nresp_temp$y <- st_coordinates(resp_temp)[,2]\nresp_temp$pred <- resp_temp$var1.pred\n\n# Kriging Variance\nresp_temp$variance <- resp_temp$var1.var\n\n# Create raster layer\nkpred_temp <- terra::rasterize(resp_temp, grid, field = \"pred\")\n\n# Kriging Variance Raster\nkpred_temp_variance <- terra::rasterize(resp_temp, grid, field = \"variance\")\n```\n:::\n\n\n\n::: panel-tabset\n## Mean Temp\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n\ntm_shape(kpred_temp) + \n  tm_raster(col_alpha = 0.6, \n            col.scale = tm_scale(values = \"brewer.yl_or_rd\"), \n            col.legend = tm_legend(title = \"Mean Temperature (°C)\")) +\n  tm_title(\"Distribution of Mean Temperature, Apr 2021\") +\n  tm_layout(frame = TRUE) +\n  tm_compass(type = \"8star\", size = 2) +\n  tm_grid(alpha = 0.2)\n```\n\n::: {.cell-output-display}\n![](Geo_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n\n## Kriging Variance\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(kpred_temp_variance) + \n  tm_raster(col_alpha = 0.6, \n            col.scale = tm_scale(values = \"brewer.yl_gn_bu\"), \n            col.legend = tm_legend(title = \"Temperature Variance\")) +\n  tm_title(\"Kriging Variance of Temperature, Apr 2021\") +\n  tm_layout(frame = TRUE) +\n  tm_compass(type = \"8star\", size = 2) +\n  tm_grid(alpha = 0.2)\n```\n\n::: {.cell-output-display}\n![](Geo_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n:::\n\n::: {.callout-note style=\"color: black; background-color: #e0f3f9\"}\n## Insights for Mean Temp\n\n**1. Spatial Interpolation of Mean Temperature**\n\nBoth maps of Mean Temperature Distribution appear visually identical, indicating that the temperature predictions are not significantly affected by variogram parameter adjustments. This suggests that the temperature trends are well captured by both approaches.\n\n**2. Kriging Variance Comparison**\n\n-   **Auto Variogram:**\n\n    -   The kriging variance is more evenly distributed, with slightly lower uncertainty in central regions.The pattern of variance seems more smooth, likely due to default parameters optimizing a general fit.\n\n-   **Manual Variogram Adjustments:**\n\n    -   The variance map shows more pronounced patches of uncertainty in different locations.\n\n    -   The kriging variance is more localized, suggesting that the manual tuning has affected the spatial relationships between points.\n\n    -   This could indicate that the manually chosen sill, range, and model parameters have led to more refined spatial dependence assumptions.\n:::\n\n------------------------------------------------------------------------\n\n# Prototype 1: Spatial Interpolation\n\n## Shiny UI\n\nThe following is the sketch of planned Shiny App user interface![](proto1.png)\n\n## Shiny App Prototype 1\n\nTo ensure the components are compatible and ready for Shiny App development, I will be creating a mini Shiny App for the analysis above.\n\n::: callout-note\n## Note\n\nNote that this is a prototype and not the actual dimensions that will be shown in the Shiny app. The plots will be bigger. The actual dimensions may be viewed here:<https://sshk.shinyapps.io/Take-Home3/>\n:::\n\n<iframe src=\"https://sshk.shinyapps.io/Take-Home3/\" width=\"100%\" height=\"600px\">\n\n</iframe>\n\n------------------------------------------------------------------------\n\n# Local Measure of Spatial Autocorrelation\n\nThe next steps involve calculating **Local Moran's I** and visualizing the **LISA (Local Indicators of Spatial Association)** map. These methods will help us understand the spatial patterns of Mean Temperature, like clustering of high or low values.\n\n## Data Prep\n\nBefore doing our analysis, we must first filter for Jan 2021 to Apr 2024 (for Shiny App development) and just Apr 2021 (for this takehome exercise). We will do this on the dataframe that has not been converted to sf. For this section, we will only do this by left joining with the boundary polygons.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather <- weather %>%\n  filter((Year > 2021 | (Year == 2021 & Month >= 1)) & \n         (Year < 2024 | (Year == 2024 & Month <= 4)))\n\nweather_my <- weather %>%\n  filter(Year == 2021, Month == 4)%>%\n  ungroup()\n\nkeepstations <- c(\"Admiralty\", \"Ang Mo Kio\", \"Changi\",\"Choa Chu Kang (South)\",\"East Coast Parkway\",\"Jurong (West)\",\"Jurong Island\",\"Newton\",\"Pasir Panjang\",\"Pulau Ubin\",\"Seletar\",\"Sentosa Island\",\"Tai Seng\",\"Tuas South\")\n\nweather_my<- weather_my%>%\n  filter(Station %in% keepstations)\n```\n:::\n\n\n\nImport the boundary polygons using *st_read* and transform it to Singapore's coordinate reference system (CRS) 3414 using the *st_transform.* Ensure that there is one common column, \"Station\", and also ensure that the names of the Stations match that of weather_my dataframe that we just prepared.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"data/geospatial\", \n                    layer = \"MPSZ-2019\") %>%\n  st_transform(crs = 3414) %>%\n  rename(Station = PLN_AREA_N) %>%\n  mutate(Station = ifelse(Station == \"SEMBAWANG\", \"Admiralty\", Station)) %>%\n  mutate(Station = ifelse(Station == \"ANG MO KIO\", \"Ang Mo Kio\", Station)) %>%\n  mutate(Station = ifelse(Station == \"CHANGI\", \"Changi\", Station)) %>%\n  mutate(Station = ifelse(Station == \"CHOA CHU KANG\", \"Choa Chu Kang (South)\", Station))%>%\n  mutate(Station = ifelse(Station == \"MARINE PARADE\", \"East Coast Parkway\", Station))%>%\n  mutate(Station = ifelse(Station == \"JURONG WEST\", \"Jurong (West)\", Station))%>%\n  mutate(Station = ifelse(Station == \"WESTERN ISLANDS\", \"Jurong Island\", Station))%>%\n  mutate(Station = ifelse(Station == \"NEWTON\", \"Newton\", Station))%>%\n  mutate(Station = ifelse(Station == \"QUEENSTOWN\", \"Pasir Panjang\", Station))%>%\n  mutate(Station = ifelse(Station == \"NORTH-EASTERN ISLANDS\", \"Pulau Ubin\", Station))%>%\n  mutate(Station = ifelse(Station == \"SELETAR\", \"Seletar\", Station))%>%\n  mutate(Station = ifelse(Station == \"SOUTHERN ISLANDS\", \"Sentosa Island\", Station))%>%\n  mutate(Station = ifelse(Station == \"HOUGANG\", \"Tai Seng\", Station))%>%\n  mutate(Station = ifelse(Station == \"TUAS\", \"Tuas South\", Station))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MPSZ-2019' from data source \n  `/Users/seesarhlakyi/Desktop/ssrhk/VA Project/isss608_Jan25_Group7/Prototypes/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\nLeft join the boundary data into weather_my using the common column.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather_with_zones <- left_join(weather_my,mpsz)\n```\n:::\n\n\n\nAggregate columns by calculating MonthlyRainfall, MonthlyMeanTemp, and MonthlyMeanWindSpeed for each Station for April 2021. While aggregating, we also ensure that there is only one single polygon for each station using *st_union*. Lastly, we convert it as sf using *st_as_sf*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather_with_zones_single_polygon <- weather_with_zones %>%\n  group_by(Station) %>%\n  summarise(\n    MonthlyRainfall = sum(DailyRainfall, na.rm = TRUE),\n    MonthlyMeanTemp = mean(MeanTemperature, na.rm = TRUE),\n    MonthlyMeanWindSpeed = mean(MeanWindSpeed, na.rm = TRUE),\n    geometry = st_union(geometry),\n    .groups = \"drop\"\n  )\n\nweather_with_zones_single_polygon <- st_as_sf(weather_with_zones_single_polygon)\n```\n:::\n\n\n\n## Raw Data - Before Spatial Interpolation\n\nLet's first explore local measures of the raw data before doing any spatial interpolation.\n\nRecall that only 14 stations have recorded data available for all three variables of interest so there will be missing parts. Let's visualize Local Moran I for the raw data with 14 stations present.\n\nStep 1: Compute centroids from prepared data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather_centroids <- st_centroid(weather_with_zones_single_polygon) \n\nknn <- st_knn(weather_centroids, k = 2)\n\nknn_weights <- st_weights(knn, style = \"W\")\n```\n:::\n\n\n\nStep 2: Calculate Local Moran's I for the predicted values and merge the Local Moran's I results back into the sf object\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlocal_moran_res <- local_moran(weather_centroids$MonthlyMeanTemp, \n                              knn, \n                               knn_weights, \n                               nsim = 99)\n\nlocal_moran_df <- as.data.frame(local_moran_res)\n\nweather_lisa <- weather_with_zones_single_polygon %>%\n  mutate(ii = local_moran_df$ii, \n         p_ii_sim = local_moran_df$p_ii_sim,\n         p_ii = local_moran_df$p_ii,\n         mean = local_moran_df$mean,\n         .before = 1) \n```\n:::\n\n\n\nStep 3: Plot the Local Moran's I map and P-value significance map\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n\n# Local Moran’s I Map \nplot1 <- tm_shape(weather_lisa) +\n  tm_fill(\"ii\", \n          fill.scale = tm_scale(palette = \"RdBu\", midpoint = 0), \n          legend.show = TRUE) +\n  tm_borders() +  \n  tm_title(\"Local Moran's I of Kriged Mean Temperature\", size = 0.5) +  \n  tm_legend(text.size = 0.5)\n\n# P-value significance map \nplot2 <- tm_shape(weather_lisa) +\n  tm_fill(\"p_ii\", \n          fill.scale = tm_scale(breaks = c(0, 0.001, 0.01, 0.05, 1),\n                               labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")),\n          palette = \"Blues\",  \n          midpoint = NA) + \n  tm_borders() +  \n  tm_title(\"P-value of Local Moran's I\", size = 0.5) +  \n  tm_legend(text.size = 0.5)\n\ntmap_arrange(plot1, plot2)\n```\n\n::: {.cell-output-display}\n![](Geo_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\n\nWe can see from the above plots that it is a broken map with only a few stations present. There is a need to perform spatial interpolation for areas with no recorded data.\n\n## After Spatial Interpolation\n\nAs we did before, we will perform spatial interpolation in the following steps:\n\nStep 1: Convert weather station data to sf object by using st_as_sf\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweather_sf <- st_as_sf(weather_with_zones_single_polygon, crs = st_crs(mpsz))\n```\n:::\n\n\n\nStep 2: Fit Exponential variogram model using variogram\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvariogram_model <- variogram(MonthlyMeanTemp ~ 1, weather_sf)\nfit_model <- fit.variogram(variogram(MonthlyMeanTemp ~ 1, weather_sf), model = vgm(\"Exp\"))\n```\n:::\n\n\n\nStep 3: Apply Ordinary Kriging with the new model and convert kriging result to sf\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkriging_result <- krige(MonthlyMeanTemp ~ 1, weather_sf, mpsz, model = fit_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n```{.r .cell-code}\nkriged_sf <- st_as_sf(kriging_result)\n```\n:::\n\n\n\nNote that the kriging output is in polygons.\n\nStep 4: Create centroids for the polygons in mpsz2019. Use KNN (K-Nearest Neighbors, this is set as 3) on centroids to compute spatial weights and compute weights for KNN (using inverse distance as weights).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_centroids <- st_centroid(mpsz)\n\nknn_result <- st_knn(mpsz_centroids, k = 3)\n\nknn_weights <- st_weights(knn_result, style = \"W\")\n```\n:::\n\n\n\nStep 5: Calculate Local Moran's I using KNN weights (with 99 simulations) and add Local Moran's I results to the kriged polygons\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nlocal_moran_res <- local_moran(kriged_sf$var1.pred, \n                               knn_result, \n                               knn_weights, \n                               nsim = 99)\n\nlocal_moran_df <- as.data.frame(local_moran_res)\n\nkriged_sf <- kriged_sf %>%\n  mutate(\n    ii = local_moran_df$ii,\n    p_ii_sim = local_moran_df$p_ii_sim,\n    p_ii = local_moran_df$p_ii,\n    mean = local_moran_df$mean\n  )\n```\n:::\n\n\n\nStep 6: Plot the Local Moran's I map and P-value significance map using tmap.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n\n# Local Moran's I Map for mean temperature\nplot1 <- tm_shape(kriged_sf) +\n  tm_fill(\"ii\", \n          fill.scale = tm_scale(midpoint = 0, palette = \"brewer.rd_bu\"), \n          legend.show = TRUE) +\n  tm_borders() +  \n  tm_title(\"Local Moran's I of Kriged Mean Temperature\", size = 0.5) +  \n  tm_legend(text.size = 0.5)\n\n# P-value significance map\nplot2 <- tm_shape(kriged_sf) +\n  tm_fill(\"p_ii\", \n          fill.scale = tm_scale(breaks = c(0, 0.001, 0.01, 0.05, 1),\n                               labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\"),\n                               palette = \"brewer.blues\"),  \n          midpoint = NA) + \n  tm_borders() +  \n  tm_title(\"P-value of Local Moran's I\", size = 0.5) +  \n  tm_legend(text.size = 0.5)\n\ntmap_arrange(plot1, plot2)\n```\n\n::: {.cell-output-display}\n![](Geo_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n\n\n::: {.callout-note style=\"color: black; background-color: #e0f3f9\"}\n## Insights from Local Moran I\n\n**1. Local Moran’s I:** shows clusters and outliers of mean temperature based on spatial autocorrelation.\n\n-   **Darker green areas (higher Moran’s I values)** indicate strong positive spatial autocorrelation, meaning these regions have neighboring areas with similar temperature values.\n\n-   **Lighter green areas (lower Moran’s I values)** suggest weaker spatial autocorrelation or more dispersed temperature patterns.\n\n-   **Light purple areas (negative Moran’s I values)** might indicate potential spatial outliers where temperature values differ significantly from their neighbors.\n\n-   Strong positive clusters (dark green) are seen in the northwest and central regions of Singapore, meaning these areas have consistently high or low mean temperatures.\n\n-   The southern and eastern regions appear to have weaker spatial autocorrelation, suggesting more temperature variability or transition zones between different temperature regimes.\n\n------------------------------------------------------------------------\n\n**2. P-Value of Local Moran’s I:** assesses the statistical significance of the Local Moran’s I results.\n\n-   **Purple areas (low p-values, \\<0.2)** indicate strong evidence that spatial clustering is significant (i.e., temperature patterns are not random).\n\n-   **Green areas (higher p-values, \\>0.6)** suggest weaker or non-significant spatial autocorrelation, meaning that any apparent clustering might be due to chance.\n\n-   **White areas (mid-range p-values, 0.4-0.6)** indicate moderate evidence, suggesting inconclusive clustering.\n\n-   The northern and central regions have significant clustering (dark purple), reinforcing that these areas show clear spatial dependence in temperature.\n\n-   Some southwestern areas have higher p-values, meaning the detected clusters there might not be statistically significant.\n:::\n\nStep 7: Plot LISA Map for significant Local Moran's I results (p-value \\< 0.05) using tmap.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa_sig <- kriged_sf %>%\n  filter(p_ii_sim < 0.05)\n\ntmap_mode(\"plot\")\n\n# LISA Map with polygon borders\ntm_shape(kriged_sf) +\n  tm_polygons() +  \n  tm_borders(fill_alpha = 0.5) +\n  tm_title(\n    text = \"LISA Map\",\n    size = 0.5  # Adjust title size\n  ) +\n  tm_shape(lisa_sig) +  \n  tm_fill(\"mean\", \n          fill.scale = tm_scale(palette = \"brewer.rd_bu\", midpoint = 0),\n          legend.show = TRUE) +  \n  tm_borders(fill_alpha = 0.4)\n```\n\n::: {.cell-output-display}\n![](Geo_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n\n\n::: {.callout-note style=\"color: black; background-color: #e0f3f9\"}\n## Insights from LISA map\n\n**1. High-High Clusters (Green Areas):** These regions have high temperatures surrounded by high temperatures, indicating strong positive spatial autocorrelation.\n\n-   **Observed in:**\n\n    -   Central Region (Bishan, Ang Mo Kio)\n\n    -   Southern coastal areas & islands (Sentosa, Southern Islands, possibly Marina South)\n\n-   **Implications:**\n\n    -   The central region is likely experiencing an urban heat island (UHI) effect due to dense urbanization.\n\n    -   Coastal/southern clusters may be influenced by heat-retaining surfaces and lower vegetation cover.\n\n------------------------------------------------------------------------\n\n**2. Low-Low Clusters (Red Areas):** These areas have low temperatures surrounded by low temperatures, forming another significant cluster.\n\n-   **Observed in:**\n\n    -   Northwestern Singapore (Lim Chu Kang, Kranji, parts of Woodlands and western regions)\n\n-   **Implications:**\n\n    -   These areas tend to have more greenery, agricultural land, and water bodies, which contribute to cooling effects.\n\n    -   Less urban development may help moderate temperatures.\n\n------------------------------------------------------------------------\n\n**3. Non-Significant Areas (Gray):** Most of the map is gray, meaning those regions do not show statistically significant clustering at the 0.05 level.\n\n-   Temperature patterns in these areas are more randomly distributed or do not have strong local spatial dependence for the month of April 2021.\n\n-   The lack of strong clustering could be due to mixed land use, variable urbanization, or insufficient local temperature contrast.\n\n------------------------------------------------------------------------\n\nUnlike some LISA maps, there are no High-Low (blue) or Low-High (yellow) clusters for the month of April in 2021.\n\n-   This suggests no strong spatial outliers (i.e., no hot spots surrounded by cold spots or vice versa).The temperature distribution is more continuous.\n:::\n\n------------------------------------------------------------------------\n\n# Prototype 2: Local Measure of Spatial Autocorrelation\n\n## 9.1 Shiny UI\n\nThe following is the sketch of planned Shiny App user interface\n\n![](proto2.png)\n\n## Shiny App Prototype 2\n\nTo ensure the components are compatible and ready for Shiny App development, I will be creating a mini Shiny App for the analysis above.\n\n::: callout-note\n## Note\n\nNote that this is a prototype and not the actual dimensions that will be shown in the Shiny app. The plots will be bigger. The actual dimensions may be viewed here: <https://sshk.shinyapps.io/proto2/>\n:::\n\n<iframe src=\"https://sshk.shinyapps.io/proto2/\" width=\"100%\" height=\"600px\">\n\n</iframe>\n",
    "supporting": [
      "Geo_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../site_libs/plotly-binding-4.10.4/plotly.js\"></script>\n<script src=\"../site_libs/typedarray-0.1/typedarray.min.js\"></script>\n<script src=\"../site_libs/jquery-3.5.1/jquery.min.js\"></script>\n<link href=\"../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n<link href=\"../site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}